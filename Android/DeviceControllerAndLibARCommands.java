/*
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
*/
package com.parrot.freeflight3.devicecontrollers;

/**********************************************************
 *            AUTOGENERATED FILE                          *
 *             DO NOT MODIFY IT                           *
 *                                                        *
 * To add new commands :                                  *
 *  - Modify ../Xml/commands.xml file                     *
 *  - Re-run generateDeviceControllerCategories.py script *
 *                                                        *
 **********************************************************/

import android.app.Service;
import com.parrot.arsdk.arsal.ARNativeData;
import com.parrot.arsdk.arcommands.ARCommand;
import com.parrot.arsdk.arnetwork.ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM;
import com.parrot.arsdk.arcommands.ARCOMMANDS_GENERATOR_ERROR_ENUM;
import com.parrot.arsdk.arsal.ARSALPrint;
import java.util.HashMap;
import android.os.Bundle;
import android.content.Intent;
import android.support.v4.content.LocalBroadcastManager;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateAllSettingsChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateResetChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateProductNameChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateProductVersionChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateProductSerialHighChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateProductSerialLowChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateCountryChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonSettingsStateAutoCountryChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonCommonStateAllStatesChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonCommonStateBatteryStateChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonCommonStateMassStorageStateListChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonCommonStateMassStorageInfoStateListChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonCommonStateCurrentDateChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonCommonStateCurrentTimeChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonCommonStateMassStorageInfoRemainingListChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonOverHeatStateOverHeatChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonOverHeatStateOverHeatRegulationChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonControllerStateIsPilotingChangedListener;
import com.parrot.arsdk.arcommands.ARCommandCommonDebugStatsEventSendPacketListener;

public abstract class DeviceControllerAndLibARCommands extends Service implements ARCommandCommonSettingsStateAllSettingsChangedListener, ARCommandCommonSettingsStateResetChangedListener, ARCommandCommonSettingsStateProductNameChangedListener, ARCommandCommonSettingsStateProductVersionChangedListener, ARCommandCommonSettingsStateProductSerialHighChangedListener, ARCommandCommonSettingsStateProductSerialLowChangedListener, ARCommandCommonSettingsStateCountryChangedListener, ARCommandCommonSettingsStateAutoCountryChangedListener, ARCommandCommonCommonStateAllStatesChangedListener, ARCommandCommonCommonStateBatteryStateChangedListener, ARCommandCommonCommonStateMassStorageStateListChangedListener, ARCommandCommonCommonStateMassStorageInfoStateListChangedListener, ARCommandCommonCommonStateCurrentDateChangedListener, ARCommandCommonCommonStateCurrentTimeChangedListener, ARCommandCommonCommonStateMassStorageInfoRemainingListChangedListener, ARCommandCommonOverHeatStateOverHeatChangedListener, ARCommandCommonOverHeatStateOverHeatRegulationChangedListener, ARCommandCommonControllerStateIsPilotingChangedListener, ARCommandCommonDebugStatsEventSendPacketListener
{
    private final static String DEVICECONTROLLERANDLIBARCOMMANDS_TAG = "DeviceControllerAndLibARCommands";
    
    private HashMap<String, Intent> deviceControllerAndLibARCommandsIntentCache;
    protected Bundle notificationDictionary = new Bundle();
    
    public final static String DeviceControllerNotificationDictionaryChanged = "DeviceControllerNotificationDictionaryChanged";
    public final static String DeviceControllerSettingsStateAllSettingsChangedNotification = "DeviceControllerSettingsStateAllSettingsChangedNotification";
    public final static String DeviceControllerSettingsStateResetChangedNotification = "DeviceControllerSettingsStateResetChangedNotification";
    public final static String DeviceControllerSettingsStateProductNameChangedNotification = "DeviceControllerSettingsStateProductNameChangedNotification";
    public final static String DeviceControllerSettingsStateProductNameChangedNotificationNameKey = "DeviceControllerSettingsStateProductNameChangedNotificationNameKey";
    public final static String DeviceControllerSettingsStateProductVersionChangedNotification = "DeviceControllerSettingsStateProductVersionChangedNotification";
    public final static String DeviceControllerSettingsStateProductVersionChangedNotificationSoftwareKey = "DeviceControllerSettingsStateProductVersionChangedNotificationSoftwareKey";
    public final static String DeviceControllerSettingsStateProductVersionChangedNotificationHardwareKey = "DeviceControllerSettingsStateProductVersionChangedNotificationHardwareKey";
    public final static String DeviceControllerSettingsStateProductSerialHighChangedNotification = "DeviceControllerSettingsStateProductSerialHighChangedNotification";
    public final static String DeviceControllerSettingsStateProductSerialHighChangedNotificationHighKey = "DeviceControllerSettingsStateProductSerialHighChangedNotificationHighKey";
    public final static String DeviceControllerSettingsStateProductSerialLowChangedNotification = "DeviceControllerSettingsStateProductSerialLowChangedNotification";
    public final static String DeviceControllerSettingsStateProductSerialLowChangedNotificationLowKey = "DeviceControllerSettingsStateProductSerialLowChangedNotificationLowKey";
    public final static String DeviceControllerSettingsStateCountryChangedNotification = "DeviceControllerSettingsStateCountryChangedNotification";
    public final static String DeviceControllerSettingsStateCountryChangedNotificationCodeKey = "DeviceControllerSettingsStateCountryChangedNotificationCodeKey";
    public final static String DeviceControllerSettingsStateAutoCountryChangedNotification = "DeviceControllerSettingsStateAutoCountryChangedNotification";
    public final static String DeviceControllerSettingsStateAutoCountryChangedNotificationAutomaticKey = "DeviceControllerSettingsStateAutoCountryChangedNotificationAutomaticKey";
    public final static String DeviceControllerCommonStateAllStatesChangedNotification = "DeviceControllerCommonStateAllStatesChangedNotification";
    public final static String DeviceControllerCommonStateBatteryStateChangedNotification = "DeviceControllerCommonStateBatteryStateChangedNotification";
    public final static String DeviceControllerCommonStateBatteryStateChangedNotificationPercentKey = "DeviceControllerCommonStateBatteryStateChangedNotificationPercentKey";
    public final static String DeviceControllerCommonStateMassStorageStateListChangedNotification = "DeviceControllerCommonStateMassStorageStateListChangedNotification";
    public final static String DeviceControllerCommonStateMassStorageStateListChangedNotificationMass_storage_idKey = "DeviceControllerCommonStateMassStorageStateListChangedNotificationMass_storage_idKey";
    public final static String DeviceControllerCommonStateMassStorageStateListChangedNotificationNameKey = "DeviceControllerCommonStateMassStorageStateListChangedNotificationNameKey";
    public final static String DeviceControllerCommonStateMassStorageInfoStateListChangedNotification = "DeviceControllerCommonStateMassStorageInfoStateListChangedNotification";
    public final static String DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationMass_storage_idKey = "DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationMass_storage_idKey";
    public final static String DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationSizeKey = "DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationSizeKey";
    public final static String DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationUsed_sizeKey = "DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationUsed_sizeKey";
    public final static String DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationPluggedKey = "DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationPluggedKey";
    public final static String DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationFullKey = "DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationFullKey";
    public final static String DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationInternalKey = "DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationInternalKey";
    public final static String DeviceControllerCommonStateCurrentDateChangedNotification = "DeviceControllerCommonStateCurrentDateChangedNotification";
    public final static String DeviceControllerCommonStateCurrentDateChangedNotificationDateKey = "DeviceControllerCommonStateCurrentDateChangedNotificationDateKey";
    public final static String DeviceControllerCommonStateCurrentTimeChangedNotification = "DeviceControllerCommonStateCurrentTimeChangedNotification";
    public final static String DeviceControllerCommonStateCurrentTimeChangedNotificationTimeKey = "DeviceControllerCommonStateCurrentTimeChangedNotificationTimeKey";
    public final static String DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification = "DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification";
    public final static String DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationFree_spaceKey = "DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationFree_spaceKey";
    public final static String DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationRec_timeKey = "DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationRec_timeKey";
    public final static String DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationPhoto_remainingKey = "DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationPhoto_remainingKey";
    public final static String DeviceControllerOverHeatStateOverHeatChangedNotification = "DeviceControllerOverHeatStateOverHeatChangedNotification";
    public final static String DeviceControllerOverHeatStateOverHeatRegulationChangedNotification = "DeviceControllerOverHeatStateOverHeatRegulationChangedNotification";
    public final static String DeviceControllerOverHeatStateOverHeatRegulationChangedNotificationRegulationTypeKey = "DeviceControllerOverHeatStateOverHeatRegulationChangedNotificationRegulationTypeKey";
    public final static String DeviceControllerControllerStateIsPilotingChangedNotification = "DeviceControllerControllerStateIsPilotingChangedNotification";
    public final static String DeviceControllerControllerStateIsPilotingChangedNotificationPilotingKey = "DeviceControllerControllerStateIsPilotingChangedNotificationPilotingKey";
    public final static String DeviceControllerStatsEventSendPacketNotification = "DeviceControllerStatsEventSendPacketNotification";
    public final static String DeviceControllerStatsEventSendPacketNotificationPacketKey = "DeviceControllerStatsEventSendPacketNotificationPacketKey";

    protected void initialize ()
    {
        initDeviceControllerAndLibARCommandsIntents ();
    }
    
    protected void registerARCommandsListener ()
    {
        ARCommand.setCommonSettingsStateAllSettingsChangedListener (this);
        ARCommand.setCommonSettingsStateResetChangedListener (this);
        ARCommand.setCommonSettingsStateProductNameChangedListener (this);
        ARCommand.setCommonSettingsStateProductVersionChangedListener (this);
        ARCommand.setCommonSettingsStateProductSerialHighChangedListener (this);
        ARCommand.setCommonSettingsStateProductSerialLowChangedListener (this);
        ARCommand.setCommonSettingsStateCountryChangedListener (this);
        ARCommand.setCommonSettingsStateAutoCountryChangedListener (this);
        ARCommand.setCommonCommonStateAllStatesChangedListener (this);
        ARCommand.setCommonCommonStateBatteryStateChangedListener (this);
        ARCommand.setCommonCommonStateMassStorageStateListChangedListener (this);
        ARCommand.setCommonCommonStateMassStorageInfoStateListChangedListener (this);
        ARCommand.setCommonCommonStateCurrentDateChangedListener (this);
        ARCommand.setCommonCommonStateCurrentTimeChangedListener (this);
        ARCommand.setCommonCommonStateMassStorageInfoRemainingListChangedListener (this);
        ARCommand.setCommonOverHeatStateOverHeatChangedListener (this);
        ARCommand.setCommonOverHeatStateOverHeatRegulationChangedListener (this);
        ARCommand.setCommonControllerStateIsPilotingChangedListener (this);
        ARCommand.setCommonDebugStatsEventSendPacketListener (this);
    }
    
    protected void unregisterARCommandsListener ()
    {
        ARCommand.setCommonSettingsStateAllSettingsChangedListener (null);
        ARCommand.setCommonSettingsStateResetChangedListener (null);
        ARCommand.setCommonSettingsStateProductNameChangedListener (null);
        ARCommand.setCommonSettingsStateProductVersionChangedListener (null);
        ARCommand.setCommonSettingsStateProductSerialHighChangedListener (null);
        ARCommand.setCommonSettingsStateProductSerialLowChangedListener (null);
        ARCommand.setCommonSettingsStateCountryChangedListener (null);
        ARCommand.setCommonSettingsStateAutoCountryChangedListener (null);
        ARCommand.setCommonCommonStateAllStatesChangedListener (null);
        ARCommand.setCommonCommonStateBatteryStateChangedListener (null);
        ARCommand.setCommonCommonStateMassStorageStateListChangedListener (null);
        ARCommand.setCommonCommonStateMassStorageInfoStateListChangedListener (null);
        ARCommand.setCommonCommonStateCurrentDateChangedListener (null);
        ARCommand.setCommonCommonStateCurrentTimeChangedListener (null);
        ARCommand.setCommonCommonStateMassStorageInfoRemainingListChangedListener (null);
        ARCommand.setCommonOverHeatStateOverHeatChangedListener (null);
        ARCommand.setCommonOverHeatStateOverHeatRegulationChangedListener (null);
        ARCommand.setCommonControllerStateIsPilotingChangedListener (null);
        ARCommand.setCommonDebugStatsEventSendPacketListener (null);
    }
    
    private void initDeviceControllerAndLibARCommandsIntents ()
    {
        deviceControllerAndLibARCommandsIntentCache = new HashMap<String, Intent>(19);
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateAllSettingsChangedNotification, new Intent (DeviceControllerSettingsStateAllSettingsChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateResetChangedNotification, new Intent (DeviceControllerSettingsStateResetChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateProductNameChangedNotification, new Intent (DeviceControllerSettingsStateProductNameChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateProductVersionChangedNotification, new Intent (DeviceControllerSettingsStateProductVersionChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateProductSerialHighChangedNotification, new Intent (DeviceControllerSettingsStateProductSerialHighChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateProductSerialLowChangedNotification, new Intent (DeviceControllerSettingsStateProductSerialLowChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateCountryChangedNotification, new Intent (DeviceControllerSettingsStateCountryChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerSettingsStateAutoCountryChangedNotification, new Intent (DeviceControllerSettingsStateAutoCountryChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerCommonStateAllStatesChangedNotification, new Intent (DeviceControllerCommonStateAllStatesChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerCommonStateBatteryStateChangedNotification, new Intent (DeviceControllerCommonStateBatteryStateChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerCommonStateMassStorageStateListChangedNotification, new Intent (DeviceControllerCommonStateMassStorageStateListChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerCommonStateMassStorageInfoStateListChangedNotification, new Intent (DeviceControllerCommonStateMassStorageInfoStateListChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerCommonStateCurrentDateChangedNotification, new Intent (DeviceControllerCommonStateCurrentDateChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerCommonStateCurrentTimeChangedNotification, new Intent (DeviceControllerCommonStateCurrentTimeChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification, new Intent (DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerOverHeatStateOverHeatChangedNotification, new Intent (DeviceControllerOverHeatStateOverHeatChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerOverHeatStateOverHeatRegulationChangedNotification, new Intent (DeviceControllerOverHeatStateOverHeatRegulationChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerControllerStateIsPilotingChangedNotification, new Intent (DeviceControllerControllerStateIsPilotingChangedNotification));
        deviceControllerAndLibARCommandsIntentCache.put(DeviceControllerStatsEventSendPacketNotification, new Intent (DeviceControllerStatsEventSendPacketNotification));
    }
    
    protected Intent getDeviceControllerAndLibARCommandsIntent (String name)
    {
        return deviceControllerAndLibARCommandsIntentCache.get(name) ;
    }
    
    public Bundle getNotificationDictionary ()
    {
        return new Bundle(notificationDictionary);
    }
    
    /**
     * Send raw data through ARNetwork. Optionally notify about delivery status.
     * @Return true if the data was queued, false if it could not.
     */
    protected abstract boolean sendData (ARNativeData data, int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData);
    
    /**
     * Called when a command <code>AllSettingsChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     */
    @Override
    public void onCommonSettingsStateAllSettingsChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(DeviceControllerSettingsStateAllSettingsChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateAllSettingsChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateAllSettingsChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ResetChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     */
    @Override
    public void onCommonSettingsStateResetChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(DeviceControllerSettingsStateResetChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateResetChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateResetChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ProductNameChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     * @param name Product name
     */
    @Override
    public void onCommonSettingsStateProductNameChangedUpdate (String name)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerSettingsStateProductNameChangedNotificationNameKey, name);
        
        updateDictionary.putBundle(DeviceControllerSettingsStateProductNameChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateProductNameChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateProductNameChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ProductVersionChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     * @param software Product software version
     * @param hardware Product hardware version
     */
    @Override
    public void onCommonSettingsStateProductVersionChangedUpdate (String software, String hardware)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerSettingsStateProductVersionChangedNotificationSoftwareKey, software);
        notificationBundle.putString(DeviceControllerSettingsStateProductVersionChangedNotificationHardwareKey, hardware);
        
        updateDictionary.putBundle(DeviceControllerSettingsStateProductVersionChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateProductVersionChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateProductVersionChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ProductSerialHighChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     * @param high Serial high number (hexadecimal value)
     */
    @Override
    public void onCommonSettingsStateProductSerialHighChangedUpdate (String high)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerSettingsStateProductSerialHighChangedNotificationHighKey, high);
        
        updateDictionary.putBundle(DeviceControllerSettingsStateProductSerialHighChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateProductSerialHighChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateProductSerialHighChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>ProductSerialLowChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     * @param low Serial low number (hexadecimal value)
     */
    @Override
    public void onCommonSettingsStateProductSerialLowChangedUpdate (String low)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerSettingsStateProductSerialLowChangedNotificationLowKey, low);
        
        updateDictionary.putBundle(DeviceControllerSettingsStateProductSerialLowChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateProductSerialLowChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateProductSerialLowChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>CountryChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     * @param code Country code with ISO 3166 format, empty string means unknown country.
     */
    @Override
    public void onCommonSettingsStateCountryChangedUpdate (String code)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerSettingsStateCountryChangedNotificationCodeKey, code);
        
        updateDictionary.putBundle(DeviceControllerSettingsStateCountryChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateCountryChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateCountryChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AutoCountryChanged</code> of class <code>SettingsState</code> in project <code>Common</code> is decoded
     * @param automatic Boolean : 0 : Manual / 1 : Auto
     */
    @Override
    public void onCommonSettingsStateAutoCountryChangedUpdate (byte automatic)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(DeviceControllerSettingsStateAutoCountryChangedNotificationAutomaticKey, automatic);
        
        updateDictionary.putBundle(DeviceControllerSettingsStateAutoCountryChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerSettingsStateAutoCountryChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerSettingsStateAutoCountryChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>AllStatesChanged</code> of class <code>CommonState</code> in project <code>Common</code> is decoded
     */
    @Override
    public void onCommonCommonStateAllStatesChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(DeviceControllerCommonStateAllStatesChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerCommonStateAllStatesChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerCommonStateAllStatesChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>BatteryStateChanged</code> of class <code>CommonState</code> in project <code>Common</code> is decoded
     * @param percent Battery percentage
     */
    @Override
    public void onCommonCommonStateBatteryStateChangedUpdate (byte percent)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(DeviceControllerCommonStateBatteryStateChangedNotificationPercentKey, percent);
        
        updateDictionary.putBundle(DeviceControllerCommonStateBatteryStateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerCommonStateBatteryStateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerCommonStateBatteryStateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MassStorageStateListChanged</code> of class <code>CommonState</code> in project <code>Common</code> is decoded
     * @param mass_storage_id Mass storage id (unique)
     * @param name Mass storage name
     */
    @Override
    public void onCommonCommonStateMassStorageStateListChangedUpdate (byte mass_storage_id, String name)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(DeviceControllerCommonStateMassStorageStateListChangedNotificationMass_storage_idKey, mass_storage_id);
        notificationBundle.putString(DeviceControllerCommonStateMassStorageStateListChangedNotificationNameKey, name);
        
        Bundle listDictionary = notificationDictionary.getBundle( DeviceControllerCommonStateMassStorageStateListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%d", mass_storage_id), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(DeviceControllerCommonStateMassStorageStateListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerCommonStateMassStorageStateListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerCommonStateMassStorageStateListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MassStorageInfoStateListChanged</code> of class <code>CommonState</code> in project <code>Common</code> is decoded
     * @param mass_storage_id Mass storage state id (unique)
     * @param size Mass storage size in MBytes
     * @param used_size Mass storage used size in MBytes
     * @param plugged Mass storage plugged (1 if mass storage is plugged, otherwise 0)
     * @param full Mass storage full information state (1 if mass storage full, 0 otherwise).
     * @param internal Mass storage internal type state (1 if mass storage is internal, 0 otherwise)
     */
    @Override
    public void onCommonCommonStateMassStorageInfoStateListChangedUpdate (byte mass_storage_id, int size, int used_size, byte plugged, byte full, byte internal)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationMass_storage_idKey, mass_storage_id);
        notificationBundle.putInt(DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationSizeKey, size);
        notificationBundle.putInt(DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationUsed_sizeKey, used_size);
        notificationBundle.putByte(DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationPluggedKey, plugged);
        notificationBundle.putByte(DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationFullKey, full);
        notificationBundle.putByte(DeviceControllerCommonStateMassStorageInfoStateListChangedNotificationInternalKey, internal);
        
        Bundle listDictionary = notificationDictionary.getBundle( DeviceControllerCommonStateMassStorageInfoStateListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%d", mass_storage_id), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(DeviceControllerCommonStateMassStorageInfoStateListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerCommonStateMassStorageInfoStateListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerCommonStateMassStorageInfoStateListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>CurrentDateChanged</code> of class <code>CommonState</code> in project <code>Common</code> is decoded
     * @param date Date with ISO-8601 format
     */
    @Override
    public void onCommonCommonStateCurrentDateChangedUpdate (String date)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerCommonStateCurrentDateChangedNotificationDateKey, date);
        
        updateDictionary.putBundle(DeviceControllerCommonStateCurrentDateChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerCommonStateCurrentDateChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerCommonStateCurrentDateChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>CurrentTimeChanged</code> of class <code>CommonState</code> in project <code>Common</code> is decoded
     * @param time Time with ISO-8601 format
     */
    @Override
    public void onCommonCommonStateCurrentTimeChangedUpdate (String time)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerCommonStateCurrentTimeChangedNotificationTimeKey, time);
        
        updateDictionary.putBundle(DeviceControllerCommonStateCurrentTimeChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerCommonStateCurrentTimeChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerCommonStateCurrentTimeChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>MassStorageInfoRemainingListChanged</code> of class <code>CommonState</code> in project <code>Common</code> is decoded
     * @param free_space Mass storage free space in MBytes
     * @param rec_time Mass storage record time reamining in minute
     * @param photo_remaining Mass storage photo remaining
     */
    @Override
    public void onCommonCommonStateMassStorageInfoRemainingListChangedUpdate (int free_space, short rec_time, int photo_remaining)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putInt(DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationFree_spaceKey, free_space);
        notificationBundle.putShort(DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationRec_timeKey, rec_time);
        notificationBundle.putInt(DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotificationPhoto_remainingKey, photo_remaining);
        
        Bundle listDictionary = notificationDictionary.getBundle( DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification);
        if(listDictionary == null)
        {
            listDictionary = new Bundle();
        }
        listDictionary.putBundle(String.format("%d", free_space), notificationBundle);
        notificationBundle = listDictionary;
        
        updateDictionary.putBundle(DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerCommonStateMassStorageInfoRemainingListChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>OverHeatChanged</code> of class <code>OverHeatState</code> in project <code>Common</code> is decoded
     */
    @Override
    public void onCommonOverHeatStateOverHeatChangedUpdate ()
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        
        updateDictionary.putBundle(DeviceControllerOverHeatStateOverHeatChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerOverHeatStateOverHeatChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerOverHeatStateOverHeatChangedNotification);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>OverHeatRegulationChanged</code> of class <code>OverHeatState</code> in project <code>Common</code> is decoded
     * @param regulationType Type of overheat regulation : 0 for ventilation, 1 for switch off
     */
    @Override
    public void onCommonOverHeatStateOverHeatRegulationChangedUpdate (byte regulationType)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(DeviceControllerOverHeatStateOverHeatRegulationChangedNotificationRegulationTypeKey, regulationType);
        
        updateDictionary.putBundle(DeviceControllerOverHeatStateOverHeatRegulationChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerOverHeatStateOverHeatRegulationChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerOverHeatStateOverHeatRegulationChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>IsPilotingChanged</code> of class <code>ControllerState</code> in project <code>Common</code> is decoded
     * @param piloting 0 when the application is not in the piloting HUD, 1 when it enters the HUD.
     */
    @Override
    public void onCommonControllerStateIsPilotingChangedUpdate (byte piloting)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putByte(DeviceControllerControllerStateIsPilotingChangedNotificationPilotingKey, piloting);
        
        updateDictionary.putBundle(DeviceControllerControllerStateIsPilotingChangedNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerControllerStateIsPilotingChangedNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerControllerStateIsPilotingChangedNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Called when a command <code>SendPacket</code> of class <code>StatsEvent</code> in project <code>Common</code> is decoded
     * @param packet packet from drone
     */
    @Override
    public void onCommonDebugStatsEventSendPacketUpdate (String packet)
    {
        /* dictionary of update */
        Bundle updateDictionary = new Bundle();
        Bundle notificationBundle = new Bundle();
        notificationBundle.putString(DeviceControllerStatsEventSendPacketNotificationPacketKey, packet);
        
        updateDictionary.putBundle(DeviceControllerStatsEventSendPacketNotification, notificationBundle);
        
        /* update the NotificationDictionary */
        notificationDictionary.putBundle(DeviceControllerStatsEventSendPacketNotification, notificationBundle);
        
        /* send NotificationDictionaryChanged */
        Intent intentDicChanged = new Intent (DeviceControllerNotificationDictionaryChanged);
        intentDicChanged.putExtras (updateDictionary);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intentDicChanged);
        
        /* send notification dedicated */
        Intent intent = deviceControllerAndLibARCommandsIntentCache.get(DeviceControllerStatsEventSendPacketNotification);
        intent.putExtras (notificationBundle);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
    
    /**
     * Send a command <code>Disconnect</code> of class <code>Network</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendNetworkDisconnect (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonNetworkDisconnect ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Disconnect command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AllSettings</code> of class <code>Settings</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendSettingsAllSettings (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonSettingsAllSettings ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AllSettings command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Reset</code> of class <code>Settings</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendSettingsReset (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonSettingsReset ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Reset command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>ProductName</code> of class <code>Settings</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param name Product name
     */
    protected boolean DeviceController_SendSettingsProductName (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String name)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonSettingsProductName (name);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send ProductName command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Country</code> of class <code>Settings</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param code Country code with ISO 3166 format
     */
    protected boolean DeviceController_SendSettingsCountry (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String code)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonSettingsCountry (code);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Country command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AutoCountry</code> of class <code>Settings</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param automatic Boolean : 0 : Manual / 1 : Auto
     */
    protected boolean DeviceController_SendSettingsAutoCountry (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte automatic)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonSettingsAutoCountry (automatic);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AutoCountry command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>AllStates</code> of class <code>Common</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendCommonAllStates (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonCommonAllStates ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send AllStates command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>CurrentDate</code> of class <code>Common</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param date Date with ISO-8601 format
     */
    protected boolean DeviceController_SendCommonCurrentDate (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String date)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonCommonCurrentDate (date);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send CurrentDate command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>CurrentTime</code> of class <code>Common</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param time Time with ISO-8601 format
     */
    protected boolean DeviceController_SendCommonCurrentTime (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String time)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonCommonCurrentTime (time);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send CurrentTime command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Reboot</code> of class <code>Common</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendCommonReboot (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonCommonReboot ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Reboot command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SwitchOff</code> of class <code>OverHeat</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendOverHeatSwitchOff (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonOverHeatSwitchOff ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SwitchOff command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>Ventilate</code> of class <code>OverHeat</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendOverHeatVentilate (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonOverHeatVentilate ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send Ventilate command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>SendPacket</code> of class <code>Stats</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param packet Packet to send to the drone
     */
    protected boolean DeviceController_SendStatsSendPacket (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, String packet)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonDebugStatsSendPacket (packet);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send SendPacket command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>StartSendingPacketFromDrone</code> of class <code>Stats</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     * @param frequency Frequency of the packet
     * @param packetSize Size of the the packet
     * @param date time of day in sec
     */
    protected boolean DeviceController_SendStatsStartSendingPacketFromDrone (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData, byte frequency, byte packetSize, int date)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonDebugStatsStartSendingPacketFromDrone (frequency, packetSize, date);
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send StartSendingPacketFromDrone command.");
        }
        
        return sentStatus;
    }
    
    /**
     * Send a command <code>StopSendingPacketFromDrone</code> of class <code>Stats</code> in project <code>Common</code>
     * @param bufferId id of the network buffer used to send
     * @param timeoutPolicy policy when sending timeout
     */
    protected boolean DeviceController_SendStatsStopSendingPacketFromDrone (int bufferId, ARNETWORK_MANAGER_CALLBACK_RETURN_ENUM timeoutPolicy, NetworkNotificationData notificationData)
    {
        ARCOMMANDS_GENERATOR_ERROR_ENUM cmdError = ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK;
        boolean sentStatus = false;
        ARCommand cmd = new ARCommand();
        
        cmdError = cmd.setCommonDebugStatsStopSendingPacketFromDrone ();
        if (cmdError == ARCOMMANDS_GENERATOR_ERROR_ENUM.ARCOMMANDS_GENERATOR_OK)
        {
            /** send the command */
            sentStatus = sendData (cmd, bufferId, timeoutPolicy, notificationData);
            cmd.dispose();
        }
        
        if (sentStatus == false)
        {
            ARSALPrint.e(DEVICECONTROLLERANDLIBARCOMMANDS_TAG, "Failed to send StopSendingPacketFromDrone command.");
        }
        
        return sentStatus;
    }
    
}

// END GENERATED CODE
